/**
 * Simple Model Information Extraction Test
 * 
 * This script tests the extraction of model information from Perplexity API responses.
 */

import * as dotenv from 'dotenv';
import * as fs from 'fs/promises';
import * as path from 'path';
import { fileURLToPath } from 'url';

// Get current file directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
dotenv.config();

// Helper functions
function log(message) {
  console.log(`[${new Date().toISOString()}] ${message}`);
}

async function testModelExtraction() {
  log('=== Testing Model Information Extraction ===');
  
  try {
    // Create test-results directory if it doesn't exist
    const outputDir = 'test-results';
    await fs.mkdir(outputDir, { recursive: true });
    
    // Test cases - different response formats
    const testCases = [
      {
        name: "New format with choices array",
        response: {
          id: "3c9bdd09-0246-4a3d-994d-8d7139f3c6e9",
          model: "llama-3.1-sonar-small-128k-online",
          created: 1743867790,
          usage: {
            prompt_tokens: 47,
            completion_tokens: 583,
            total_tokens: 630
          },
          citations: [
            "https://www.pricingio.com/saas-pricing-models/"
          ],
          object: "chat.completion",
          choices: [
            {
              index: 0,
              finish_reason: "stop",
              message: {
                role: "assistant",
                content: "This is a test response"
              }
            }
          ]
        }
      },
      {
        name: "Old format with direct content",
        response: {
          id: "perplexity-response-123",
          model: "sonar",
          created: 1742850123,
          content: "This is a test response in old format"
        }
      },
      {
        name: "Format with model in metadata",
        response: {
          id: "perplexity-response-456",
          created: 1742850456,
          choices: [
            {
              index: 0,
              message: {
                role: "assistant",
                content: "This is a test response with model in metadata"
              },
              metadata: {
                model: "sonar-online-2023"
              }
            }
          ]
        }
      },
      {
        name: "Format with embedded model mention",
        response: {
          id: "perplexity-response-789",
          created: 1742850789,
          choices: [
            {
              index: 0,
              message: {
                role: "assistant",
                content: "This response was generated by Perplexity AI using the sonar-advanced model."
              }
            }
          ]
        }
      },
      {
        name: "Minimal format without model info",
        response: {
          id: "perplexity-response-minimal",
          choices: [
            {
              message: {
                content: "This is a minimal response"
              }
            }
          ]
        }
      }
    ];
    
    // Test extraction function in various ways
    const results = [];
    
    for (const testCase of testCases) {
      log(`\nTesting: ${testCase.name}`);
      
      // Test with direct extraction
      const extractedModel = extractModelInfo(testCase.response);
      log(`Extracted model: ${extractedModel || "No model detected"}`);
      
      // Test with defaultModel parameter
      const defaultModel = "default-sonar-model";
      const extractedWithDefault = extractModelInfo(testCase.response, defaultModel);
      log(`Extracted with default: ${extractedWithDefault}`);
      
      results.push({
        testCase: testCase.name,
        extractedModel,
        extractedWithDefault,
        originalResponse: testCase.response
      });
    }
    
    // Save results
    const timestamp = new Date().toISOString().replace(/:/g, '-');
    const resultsFile = path.join(outputDir, `model-extraction-test-${timestamp}.json`);
    await fs.writeFile(resultsFile, JSON.stringify(results, null, 2));
    
    log(`\nTest results saved to ${resultsFile}`);
    log('=== Test completed successfully ===');
    
  } catch (error) {
    log(`Error in test: ${error.message}`);
    console.error(error);
  }
}

/**
 * Extract model information from a Perplexity API response
 * 
 * @param {Object} response - The API response object
 * @param {string} defaultModel - Default model name to use if extraction fails
 * @returns {string} The extracted model name or defaultModel
 */
function extractModelInfo(response, defaultModel = "unknown") {
  if (!response) {
    return defaultModel;
  }
  
  // Try direct model property (new format)
  if (response.model) {
    return response.model;
  }
  
  // Try to extract from choices.metadata (possible format)
  if (response.choices && response.choices[0] && response.choices[0].metadata && response.choices[0].metadata.model) {
    return response.choices[0].metadata.model;
  }
  
  // Try to extract from content text (fallback)
  if (response.choices && response.choices[0] && response.choices[0].message && response.choices[0].message.content) {
    const content = response.choices[0].message.content;
    
    // Look for model mentions in text - pattern: "using the sonar-advanced model"
    const modelMentionRegex = /using\s+(?:the\s+)?['"]?(sonar|llama|claude)[-\w.]*/i;
    const match = content.match(modelMentionRegex);
    
    if (match && match[0]) {
      // Extract just the model name by removing the leading text
      return match[0].replace(/^using\s+(?:the\s+)?['"]?/i, '').trim();
    }
    
    // Secondary pattern: "model: sonar" or "model is sonar-advanced"
    const modelColonRegex = /model(?::|is|=)\s+['"]?(sonar|llama|claude)[-\w.]*/i;
    const matchColon = content.match(modelColonRegex);
    
    if (matchColon && matchColon[0]) {
      return matchColon[0].replace(/^model(?::|is|=)\s+['"]?/i, '').trim();
    }
  }
  
  // If all extraction attempts fail, return the default
  return defaultModel;
}

// Run the test
testModelExtraction();