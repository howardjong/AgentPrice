// services/perplexityService.js
const RobustAPIClient = require('../utils/apiClient');
const CircuitBreaker = require('../utils/circuitBreaker');
const logger = require('../utils/logger');
const promptManager = require('./promptManager');

const apiClient = new RobustAPIClient({
  maxRetries: 2,
  timeout: 120000 // 2 minutes for long-running deep research
});

const circuitBreaker = new CircuitBreaker({
  failureThreshold: 3,
  resetTimeout: 300000 // 5 minutes
});

async function performDeepResearch(query, jobId) {
  try {
    logger.info(`Initiating deep research`, { jobId, queryLength: query.length });
    
    // Load prompt template
    const promptTemplate = await promptManager.getPrompt('perplexity', 'deep_research');
    
    // Format prompt with variables
    const formattedQuery = promptManager.formatPrompt(promptTemplate, { query });
    
    // Real Perplexity API call with circuit breaker pattern
    const response = await circuitBreaker.executeRequest('perplexity', async () => {
      const start = Date.now();
      
      const result = await apiClient.request({
        method: 'POST',
        url: 'https://api.perplexity.ai/chat/completions',
        headers: {
          'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
          'Content-Type': 'application/json'
        },
        data: {
          model: 'sonar-medium-online',
          messages: [{ role: 'user', content: formattedQuery }],
          options: {
            depth: 'deep', // Enable Deep Research mode
            stream_final: true // Enable result streaming
          }
        }
      });
      
      const duration = Date.now() - start;
      logger.info('Perplexity API response received', {
        duration: `${duration}ms`,
        jobId
      });
      
      return result;
    });
    
    // Process and return the response
    if (response.data && response.data.choices && response.data.choices.length > 0) {
      const responseData = response.data.choices[0].message;
      
      logger.info('Deep research completed successfully', { 
        jobId, 
        contentLength: responseData.content.length 
      });
      
      return {
        query: formattedQuery,
        timestamp: new Date().toISOString(),
        content: responseData.content,
        sources: responseData.references || []
      };
    } else {
      throw new Error('Invalid response format from Perplexity API');
    }
  } catch (error) {
    logger.error('Error performing deep research', { 
      jobId, 
      error: error.message 
    });
    
    // Check for specific Perplexity API errors
    if (error.response && error.response.data) {
      logger.error('Perplexity API error details', {
        jobId,
        status: error.response.status,
        data: error.response.data
      });
    }
    throw error;
  }
}

module.exports = {
  performDeepResearch
};
