// services/anthropicService.js
const { Anthropic } = require('@anthropic-ai/sdk');
const CircuitBreaker = require('../utils/circuitBreaker');
const RobustAPIClient = require('../utils/apiClient');
const logger = require('../utils/logger');
const promptManager = require('./promptManager');

const apiClient = new RobustAPIClient({
  maxRetries: 3,
  timeout: 60000 // 60 seconds
});

const circuitBreaker = new CircuitBreaker({
  failureThreshold: 3,
  resetTimeout: 60000 // 1 minute
});

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY
});

const MODEL = process.env.CLAUDE_MODEL || "claude-3-sonnet-20240307";

async function callAnthropicAPI(endpoint, params) {
  return circuitBreaker.executeRequest('anthropic', async () => {
    try {
      logger.debug('Calling Anthropic API', { 
        endpoint: endpoint.name,
        model: params.model
      });
      
      const start = Date.now();
      const response = await endpoint(params);
      const duration = Date.now() - start;
      
      logger.info('Anthropic API response received', { 
        duration: `${duration}ms`,
        outputLength: response.content[0].text.length,
        model: params.model
      });
      
      return response;
    } catch (error) {
      logger.error('Anthropic API error', { 
        error: error.message, 
        endpoint: endpoint.name 
      });
      throw error;
    }
  });
}

async function generateClarifyingQuestions(query) {
  try {
    // Load prompt from prompt manager
    const systemPrompt = await promptManager.getPrompt('claude', 'clarifying_questions');
    
    const response = await callAnthropicAPI(
      anthropic.messages.create,
      {
        model: MODEL,
        max_tokens: 1000,
        system: systemPrompt,
        messages: [
          {
            role: "user",
            content: `Generate 5 clarifying questions for deep research on: "${query}"`
          }
        ]
      }
    );

    // Extract and parse questions
    const content = response.content[0].text;
    try {
      const jsonMatch = content.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      // Fallback extraction logic
      return extractQuestionsFromText(content);
    } catch (parseError) {
      logger.error('Failed to parse questions', { error: parseError.message });
      return generateDefaultQuestions(query);
    }
  } catch (error) {
    logger.error('Error generating questions', { error: error.message });
    throw error;
  }
}

async function generateResponse(query, context) {
  try {
    // Load prompt from prompt manager
    const systemPrompt = await promptManager.getPrompt('claude', 'response_generation');
    
    const response = await callAnthropicAPI(
      anthropic.messages.create,
      {
        model: MODEL,
        max_tokens: 4000,
        system: systemPrompt,
        messages: [
          {
            role: "user",
            content: `Context: ${context}\n\nQuestion: ${query}`
          }
        ]
      }
    );
    
    return response.content[0].text;
  } catch (error) {
    logger.error('Error generating response', { error: error.message });
    throw error;
  }
}

async function generateChartData(researchResults, chartType) {
  try {
    // Load the appropriate prompt based on chart type
    const systemPrompt = await promptManager.getPrompt('claude', `chart_data/${chartType}`);

    const response = await callAnthropicAPI(
      anthropic.messages.create,
      {
        model: MODEL,
        max_tokens: 2000,
        system: systemPrompt,
        messages: [
          {
            role: "user",
            content: `Generate the appropriate data structure for ${chartType} based on these research results: ${researchResults.substring(0, 8000)}`
          }
        ]
      }
    );

    const content = response.content[0].text;
    // Extract JSON from the response
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    
    throw new Error('Failed to generate chart data');
  } catch (error) {
    logger.error(`Error generating ${chartType} chart data`, { error: error.message });
    throw error;
  }
}

// Helper functions
function extractQuestionsFromText(text) {
  // Extract questions by line
  const lines = text.split('\n').filter(line => 
    line.trim().length > 0 && 
    (line.includes('?') || /^\d+\./.test(line))
  );
  
  return lines.slice(0, 5).map(line => 
    line.replace(/^\d+[\.\)]?\s*/, '').trim()
  );
}

function generateDefaultQuestions(query) {
  return [
    `What specific aspects of "${query}" are you most interested in?`,
    `What is your current understanding of this topic?`,
    `Are there particular sources or perspectives you want included?`,
    `What timeframe or geographical scope should the research focus on?`,
    `How will you be using this research information?`
  ];
}

module.exports = {
  generateClarifyingQuestions,
  generateResponse,
  generateChartData
};