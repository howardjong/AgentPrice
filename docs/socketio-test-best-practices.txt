Socket.IO Testing Best Practices
===============================

Date: April 4, 2025
Status: Approved
Contributors: Testing Team

Introduction
-----------

This document outlines the best practices and patterns for testing Socket.IO applications in the Replit environment, based on our learnings from the Jest to Vitest migration and Socket.IO optimizations project.

Core Principles
--------------

1. Explicit Control Over Implicit Magic: Prefer explicit setup and teardown over relying on automatic behaviors.
2. Deterministic Waiting Over Arbitrary Timeouts: Use event-based waiting instead of fixed timeouts.
3. Proactive Cleanup: Always clean up resources aggressively after each test.
4. Resource Efficiency: Optimize for the memory-constrained environment.

Best Practices
-------------

1. Connection Setup

// RECOMMENDED
const socket = io('http://localhost:3000', {
  reconnection: true,
  reconnectionAttempts: 3,
  reconnectionDelay: 100,
  reconnectionDelayMax: 200,
  timeout: 2000
});

// Wait for connection explicitly
await waitForEvent(socket, 'connect', 2000);


2. Event-Based Waiting

// RECOMMENDED: Use the waitForEvent utility
function waitForEvent(socket, eventName, timeout = 2000) {
  return Promise.race([
    new Promise(resolve => socket.once(eventName, resolve)),
    new Promise((_, reject) => 
      setTimeout(() => reject(new Error(`Timeout waiting for "${eventName}"`)), timeout)
    )
  ]);
}

// Usage example
await waitForEvent(socket, 'data:received', 2000);


3. Proper Cleanup

// RECOMMENDED: Clean up in afterEach
afterEach(() => {
  // Disable reconnection before disconnecting to prevent reconnection attempts
  if (socket && socket.connected) {
    socket.io.opts.reconnection = false;
    socket.disconnect();
  }
  
  // Remove all listeners to prevent memory leaks
  socket.removeAllListeners();
  
  // Clean up server if needed
  if (server) {
    server.close();
  }
});


4. Safe Reconnection Testing

// RECOMMENDED: Test the app's reaction to events, not the Socket.IO internals
it('should handle reconnection correctly', async () => {
  // Initial connection
  socket.connect();
  await waitForEvent(socket, 'connect', 2000);
  
  // Setup event tracking for deterministic waiting
  let reconnectDetected = false;
  socket.on('connect', () => {
    if (reconnectDetected) {
      socket.emit('reconnect_confirmed');
    }
  });
  
  // Simulate disconnect
  socket.disconnect();
  await waitForEvent(socket, 'disconnect', 2000);
  reconnectDetected = true;
  
  // Simulate reconnect with explicit control
  socket.connect();
  await waitForEvent(socket, 'reconnect_confirmed', 2000);
  
  // Verify application state after reconnection
  expect(appState.isConnected).toBe(true);
});


5. Memory Optimization

// RECOMMENDED: Use low memory mode for Socket.IO tests
const io = require('socket.io')(httpServer, {
  perMessageDeflate: false, // Disable compression to reduce memory usage
  maxHttpBufferSize: 1e6,   // 1 MB instead of default 5 MB
  pingTimeout: 10000,       // Lower ping timeout
  pingInterval: 5000        // More frequent pings for faster disconnect detection
});


6. Avoiding Common Pitfalls

a) Flaky Tests Due to Event Timing

// NOT RECOMMENDED
socket.emit('request_data');
await new Promise(resolve => setTimeout(resolve, 500)); // Arbitrary wait
expect(receivedData).toBeTruthy(); // May be flaky

// RECOMMENDED
socket.emit('request_data');
const data = await waitForEvent(socket, 'data_response', 2000);
expect(data).toBeTruthy();


b) Memory Leaks from Listeners

// NOT RECOMMENDED
socket.on('data', (data) => {
  // Process data
});

// RECOMMENDED
function handleData(data) {
  // Process data
}
socket.on('data', handleData);
// Later in cleanup:
socket.off('data', handleData);
// Or better yet, use:
socket.removeAllListeners('data');


c) Port Conflicts Between Tests

// RECOMMENDED: Use dynamic port assignment
const getPort = require('get-port');
const port = await getPort({ port: getPort.makeRange(3000, 3100) });
const server = http.createServer().listen(port);


Replit-Specific Considerations
-----------------------------

1. Timeout Sensitivity: Use shorter timeouts (2000ms instead of 5000ms) to prevent test suite timeouts.
2. Run Tests Individually: Run Socket.IO tests with `npm test -- -t "test name"` for better isolation.
3. Environment Variables: Enable Socket.IO debug logs with `DEBUG=socket.io*` for troubleshooting.
4. Memory Monitoring: Use the `system-health-monitor.js` script to monitor memory during long test runs.


Example: Optimized Test Pattern
------------------------------

// Complete example of an optimized Socket.IO test
const { io } = require('socket.io-client');
const http = require('http');
const { Server } = require('socket.io');
const getPort = require('get-port');
const { describe, it, beforeEach, afterEach } = require('vitest');

describe('Socket.IO Optimized Test', () => {
  let httpServer;
  let ioServer;
  let clientSocket;
  let port;

  // Helper for event-based waiting
  function waitForEvent(socket, eventName, timeout = 2000) {
    return Promise.race([
      new Promise(resolve => socket.once(eventName, resolve)),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error(`Timeout waiting for "${eventName}"`)), timeout)
      )
    ]);
  }

  // Setup for each test
  beforeEach(async () => {
    // Get dynamic port
    port = await getPort({ port: getPort.makeRange(3000, 3100) });
    
    // Setup server with memory optimizations
    httpServer = http.createServer();
    ioServer = new Server(httpServer, {
      perMessageDeflate: false,
      maxHttpBufferSize: 1e6,
      pingTimeout: 10000,
      pingInterval: 5000
    });
    
    // Start server
    httpServer.listen(port);
    
    // Setup client with explicit reconnection control
    clientSocket = io(`http://localhost:${port}`, {
      reconnection: true,
      reconnectionAttempts: 3,
      reconnectionDelay: 100,
      reconnectionDelayMax: 200,
      timeout: 2000
    });
    
    // Wait for client connection explicitly
    await waitForEvent(clientSocket, 'connect', 2000);
  });

  // Cleanup after each test
  afterEach(() => {
    // Disable reconnection before disconnecting
    if (clientSocket) {
      clientSocket.io.opts.reconnection = false;
      clientSocket.disconnect();
      clientSocket.removeAllListeners();
    }
    
    // Close server
    if (ioServer) {
      ioServer.close();
    }
    
    if (httpServer) {
      httpServer.close();
    }
  });

  // Test case
  it('should handle basic event communication', async () => {
    // Setup server event handler
    ioServer.on('connection', (socket) => {
      socket.on('client_message', (data) => {
        socket.emit('server_response', { echo: data });
      });
    });
    
    // Send message from client
    clientSocket.emit('client_message', 'Hello Server');
    
    // Wait for response with event-based waiting
    const response = await waitForEvent(clientSocket, 'server_response', 2000);
    
    // Verify response
    expect(response).toEqual({ echo: 'Hello Server' });
  });
});


Monitoring and Validation
------------------------

For continuous validation of Socket.IO functionality:

1. Run the Socket.IO health check periodically:
   node tests/unit/websocket/socket-io-health-check.js

2. Monitor memory usage during Socket.IO operations:
   node scripts/system-health-monitor.js --once

3. Use end-to-end tests to validate full query flow:
   node tests/e2e/single-query-flow-test.js


Conclusion
---------

Following these best practices will ensure more reliable and resource-efficient Socket.IO tests, especially in memory-constrained environments like Replit. The key takeaways are:

1. Use explicit event-based waiting
2. Implement aggressive cleanup
3. Control reconnection behavior explicitly
4. Optimize for lower memory consumption
5. Monitor system resources during testing


References
---------

- Socket.IO Official Documentation (https://socket.io/docs/v4/)
- Socket.IO Test Optimizations Commit Note (../socket-io-optimizations-commit-note.md)
- Pre-Merge Validation Report (../pre-merge-validation-report.md)
- System Health Monitor Script (../scripts/system-health-monitor.js)