
===============================================
  Single Query Workflow Test Runner
===============================================
Mode:    MOCK API CALLS
Variant: chartgen
Query:   "What are the latest advancements in renewable energy storage?"
===============================================

🔶 Using mock API calls - safe for testing
   Test results will use pre-defined data

Executing: npx vitest run tests/unit/workflows/enhanced-single-query-workflow.vitest.js


 RUN  v3.0.9 /home/runner/workspace


 RUN  v3.0.9 /home/runner/workspace

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
✅ Vitest setup complete

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
✅ Vitest setup complete

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Test suite starting...
Loading mock services...

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Test suite starting...
Loading mock services...

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Added default mock clarification for: What are the latest advancements in renewable energy storage?
Added default mock clarification for: What are the latest advancements in quantum computing?
Added default mock clarification for: What are global renewable energy adoption rates?
Loading mock data from fixtures path: /home/runner/workspace/tests/workflows/single-query-workflow/fixtures
Test queries path: /home/runner/workspace/tests/workflows/single-query-workflow/fixtures/test-queries.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Added default mock clarification for: What are the latest advancements in renewable energy storage?
Added default mock clarification for: What are the latest advancements in quantum computing?
Added default mock clarification for: What are global renewable energy adoption rates?
Loading mock data from fixtures path: /home/runner/workspace/tests/workflows/single-query-workflow/fixtures
Test queries path: /home/runner/workspace/tests/workflows/single-query-workflow/fixtures/test-queries.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Mock services initialized: Claude service available: [33mtrue[39m Perplexity service available: [33mtrue[39m

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Mock services initialized: Claude service available: [33mtrue[39m Perplexity service available: [33mtrue[39m

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Validating mock services after initialization:
Claude mock service initialized: [33mtrue[39m
Perplexity mock service initialized: [33mtrue[39m
Claude clarifyQuery method available: [33mtrue[39m

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Validating mock services after initialization:
Claude mock service initialized: [33mtrue[39m
Perplexity mock service initialized: [33mtrue[39m
Claude clarifyQuery method available: [33mtrue[39m

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Running workflow test variant: basic
Starting workflow test...
Using query: What are the best practices for unit testing?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the best practices for unit testing?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the best practices for unit testing?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the best practices for unit testing?"
No mock data found, using default response for query: What are the best practices for unit testing?
Default response: {"clarifiedQuery":"What are the best practices for unit testing? (with focus on recent developments and practical applications)","clarificationContext":{"refinementReason":"Added specificity and timeframe","confidenceScore":0.9,"modelUsed":"claude-mock"}}

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Running workflow test variant: basic
Starting workflow test...
Using query: What are the best practices for unit testing?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the best practices for unit testing?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the best practices for unit testing?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the best practices for unit testing?"
No mock data found, using default response for query: What are the best practices for unit testing?
Default response: {"clarifiedQuery":"What are the best practices for unit testing? (with focus on recent developments and practical applications)","clarificationContext":{"refinementReason":"Added specificity and timeframe","confidenceScore":0.9,"modelUsed":"claude-mock"}}

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Raw clarification results: {
  clarifiedQuery: [32m'What are the best practices for unit testing? (with focus on recent developments and practical applications)'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity and timeframe'[39m,
    confidenceScore: [33m0.9[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the best practices for unit testing? (with focus on recent developments and practical applications)",
  "clarificationContext": {
    "refinementReason": "Added specificity and timeframe",
    "confidenceScore": 0.9,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the best practices for unit testing? (with focus on recent developments and practical applications)
Mock data research available: []
*********************************************
Mock Perplexity is handling query: "What are the best practices for unit testing? (with focus on recent developments and practical applications)"
No mock data found, using default research response for query: What are the best practices for unit testing? (with focus on recent developments and practical applications)

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Raw clarification results: {
  clarifiedQuery: [32m'What are the best practices for unit testing? (with focus on recent developments and practical applications)'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity and timeframe'[39m,
    confidenceScore: [33m0.9[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the best practices for unit testing? (with focus on recent developments and practical applications)",
  "clarificationContext": {
    "refinementReason": "Added specificity and timeframe",
    "confidenceScore": 0.9,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the best practices for unit testing? (with focus on recent developments and practical applications)
Mock data research available: []
*********************************************
Mock Perplexity is handling query: "What are the best practices for unit testing? (with focus on recent developments and practical applications)"
No mock data found, using default research response for query: What are the best practices for unit testing? (with focus on recent developments and practical applications)

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m563[39m
Query: What are the best practices for unit testing? (with focus on recent developments and practical applications)
*********************************************
Mock Claude extracting data for: "What are the best practices for unit testing? (with focus on recent developments and practical applications)"
No predefined extraction found, using default values

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m563[39m
Query: What are the best practices for unit testing? (with focus on recent developments and practical applications)
*********************************************
Mock Claude extracting data for: "What are the best practices for unit testing? (with focus on recent developments and practical applications)"
No predefined extraction found, using default values

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Sample Extracted Data",
  "chartType": "bar",
  "categories": [
    "Category A",
    "Category B",
    "Category C"
  ],
  "values": [
    25,
    40,
    15
  ],
  "metricName": "Value"
}
Query: What are the best practices for unit testing? (with focus on recent developments and practical applications)
*********************************************
Mock Claude generating chart data for: "What are the best practices for unit testing? (with focus on recent developments and practical applications)"
No predefined chart found, generating from data

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Sample Extracted Data",
  "chartType": "bar",
  "categories": [
    "Category A",
    "Category B",
    "Category C"
  ],
  "values": [
    25,
    40,
    15
  ],
  "metricName": "Value"
}
Query: What are the best practices for unit testing? (with focus on recent developments and practical applications)
*********************************************
Mock Claude generating chart data for: "What are the best practices for unit testing? (with focus on recent developments and practical applications)"
No predefined chart found, generating from data

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Test queries file exists: [33mtrue[39m

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Test queries file exists: [33mtrue[39m

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Loaded test queries: [33m10[39m
Mock API responses path: /home/runner/workspace/tests/workflows/single-query-workflow/fixtures/mock-api-responses.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Loaded test queries: [33m10[39m
Mock API responses path: /home/runner/workspace/tests/workflows/single-query-workflow/fixtures/mock-api-responses.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Mock API responses file exists: [33mtrue[39m

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Mock API responses file exists: [33mtrue[39m

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Test results saved to: basic-test-2025-04-05T06-13-03-192Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
Test results saved to: basic-test-2025-04-05T06-13-03-192Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
Running workflow test variant: basic
Using real API services for this test run

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
Running workflow test variant: basic
Using real API services for this test run

stderr | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
Workflow test failed: Live API testing is not enabled. Set ENABLE_LIVE_API_TESTS=true to run with real APIs.

stderr | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
Workflow test failed: Live API testing is not enabled. Set ENABLE_LIVE_API_TESTS=true to run with real APIs.

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
Mock responses loaded, queries: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Configuring mock for query: What are the latest advancements in renewable energy storage?
Response data available: [ [32m'clarification'[39m, [32m'research'[39m, [32m'extraction'[39m, [32m'chart'[39m ]
configureMockForQuery called for query: What are the latest advancements in renewable energy storage?
Setting up clarification mock for query: What are the latest advancements in renewable energy storage?
Clarification data: {"clarifiedQuery":"What are the most recent technological breakthroughs and implementations in grid-scale and residential renewable energy storage systems, focusing on developments from the past 2-3 years?","clarificationContext":{"refinementReason":"Added specificity about timeframe and application domains","confidenceScore":0.95,"modelUsed":"claude-mock"}}
Has clarifiedQuery: [33mtrue[39m
Stored mock data for clarification, keys now: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Verification - Mock data stored successfully
Retrieved mock has clarifiedQuery: [33mtrue[39m
Setting up research mock for query: What are the latest advancements in renewable energy storage?
Setting up extraction mock for query: What are the latest advancements in renewable energy storage?
Setting up chart mock for query: What are the latest advancements in renewable energy storage?
Configuring mock for query: What are the latest advancements in quantum computing?
Response data available: [ [32m'clarification'[39m, [32m'research'[39m ]
configureMockForQuery called for query: What are the latest advancements in quantum computing?
Setting up clarification mock for query: What are the latest advancements in quantum computing?
Clarification data: {"clarifiedQuery":"What are the most significant hardware and software advancements in quantum computing from the past year, focusing on qubit count, error correction, and practical applications?","clarificationContext":{"refinementReason":"Added specificity about timeframe and technical areas of interest","confidenceScore":0.9,"modelUsed":"claude-mock"}}
Has clarifiedQuery: [33mtrue[39m
Stored mock data for clarification, keys now: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Verification - Mock data stored successfully
Retrieved mock has clarifiedQuery: [33mtrue[39m
Setting up research mock for query: What are the latest advancements in quantum computing?
Configuring mock for query: What are global renewable energy adoption rates?
Response data available: [ [32m'clarification'[39m, [32m'research'[39m, [32m'extraction'[39m, [32m'chart'[39m ]
configureMockForQuery called for query: What are global renewable energy adoption rates?
Setting up clarification mock for query: What are global renewable energy adoption rates?
Clarification data: {"clarifiedQuery":"What are the current global adoption rates of different renewable energy technologies, including regional variations and recent growth trends?","clarificationContext":{"refinementReason":"Added specificity about technology types and analytical dimensions","confidenceScore":0.95,"modelUsed":"claude-mock"}}
Has clarifiedQuery: [33mtrue[39m
Stored mock data for clarification, keys now: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Verification - Mock data stored successfully
Retrieved mock has clarifiedQuery: [33mtrue[39m
Setting up research mock for query: What are global renewable energy adoption rates?
Setting up extraction mock for query: What are global renewable energy adoption rates?
Setting up chart mock for query: What are global renewable energy adoption rates?
Configured mock data:
- Clarifications: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
- Research: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Mock data loaded from fixtures

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
Mock responses loaded, queries: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Configuring mock for query: What are the latest advancements in renewable energy storage?
Response data available: [ [32m'clarification'[39m, [32m'research'[39m, [32m'extraction'[39m, [32m'chart'[39m ]
configureMockForQuery called for query: What are the latest advancements in renewable energy storage?
Setting up clarification mock for query: What are the latest advancements in renewable energy storage?
Clarification data: {"clarifiedQuery":"What are the most recent technological breakthroughs and implementations in grid-scale and residential renewable energy storage systems, focusing on developments from the past 2-3 years?","clarificationContext":{"refinementReason":"Added specificity about timeframe and application domains","confidenceScore":0.95,"modelUsed":"claude-mock"}}
Has clarifiedQuery: [33mtrue[39m
Stored mock data for clarification, keys now: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Verification - Mock data stored successfully
Retrieved mock has clarifiedQuery: [33mtrue[39m
Setting up research mock for query: What are the latest advancements in renewable energy storage?
Setting up extraction mock for query: What are the latest advancements in renewable energy storage?
Setting up chart mock for query: What are the latest advancements in renewable energy storage?
Configuring mock for query: What are the latest advancements in quantum computing?
Response data available: [ [32m'clarification'[39m, [32m'research'[39m ]
configureMockForQuery called for query: What are the latest advancements in quantum computing?
Setting up clarification mock for query: What are the latest advancements in quantum computing?
Clarification data: {"clarifiedQuery":"What are the most significant hardware and software advancements in quantum computing from the past year, focusing on qubit count, error correction, and practical applications?","clarificationContext":{"refinementReason":"Added specificity about timeframe and technical areas of interest","confidenceScore":0.9,"modelUsed":"claude-mock"}}
Has clarifiedQuery: [33mtrue[39m
Stored mock data for clarification, keys now: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Verification - Mock data stored successfully
Retrieved mock has clarifiedQuery: [33mtrue[39m
Setting up research mock for query: What are the latest advancements in quantum computing?
Configuring mock for query: What are global renewable energy adoption rates?
Response data available: [ [32m'clarification'[39m, [32m'research'[39m, [32m'extraction'[39m, [32m'chart'[39m ]
configureMockForQuery called for query: What are global renewable energy adoption rates?
Setting up clarification mock for query: What are global renewable energy adoption rates?
Clarification data: {"clarifiedQuery":"What are the current global adoption rates of different renewable energy technologies, including regional variations and recent growth trends?","clarificationContext":{"refinementReason":"Added specificity about technology types and analytical dimensions","confidenceScore":0.95,"modelUsed":"claude-mock"}}
Has clarifiedQuery: [33mtrue[39m
Stored mock data for clarification, keys now: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Verification - Mock data stored successfully
Retrieved mock has clarifiedQuery: [33mtrue[39m
Setting up research mock for query: What are global renewable energy adoption rates?
Setting up extraction mock for query: What are global renewable energy adoption rates?
Setting up chart mock for query: What are global renewable energy adoption rates?
Configured mock data:
- Clarifications: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
- Research: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
Mock data loaded from fixtures

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
Test results saved to: basic-test-2025-04-05T06-13-03-201Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
Test results saved to: basic-test-2025-04-05T06-13-03-201Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
Running workflow test variant: basic
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
Running workflow test variant: basic
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
Test results saved to: basic-test-2025-04-05T06-13-03-211Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
Test results saved to: basic-test-2025-04-05T06-13-03-211Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
Running workflow test variant: basic
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
Running workflow test variant: basic
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
Test results saved to: basic-test-2025-04-05T06-13-03-216Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
Test results saved to: basic-test-2025-04-05T06-13-03-216Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
Running workflow test variant: basic
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
Running workflow test variant: basic
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
Test results saved to: basic-test-2025-04-05T06-13-03-224Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
Test results saved to: basic-test-2025-04-05T06-13-03-224Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
Running workflow test variant: noDeepResearch
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
Running workflow test variant: noDeepResearch
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
Test results saved to: noDeepResearch-test-2025-04-05T06-13-03-228Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
Test results saved to: noDeepResearch-test-2025-04-05T06-13-03-228Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
Running workflow test variant: performance
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
Running workflow test variant: performance
Starting workflow test...
Using query: What are the latest advancements in renewable energy storage?
Services available: Claude: [33mtrue[39m Perplexity: [33mtrue[39m Workflow: [33mtrue[39m
Starting Stage 1: Query clarification with Claude
Claude clarifyQuery function type: function
Is it a function? [33mtrue[39m
About to call Claude.clarifyQuery with query: What are the latest advancements in renewable energy storage?
********* MOCK CLAUDE SERVICE CALLED *********
Function: clarifyQuery
Query: What are the latest advancements in renewable energy storage?
Function context: [36m<ref *1>[39m Object [global] {
  global: [36m[Circular *1][39m,
  clearImmediate: [36m[Function: clearImmediate][39m,
  setImmediate: [Function: setImmediate] {
    [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
  },
  clearInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  clearTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setInterval: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  setTimeout: [Function: spy] {
    getMockName: [36m[Function (anonymous)][39m,
    mockName: [36m[Function (anonymous)][39m,
    mockClear: [36m[Function (anonymous)][39m,
    mockReset: [36m[Function (anonymous)][39m,
    mockRestore: [36m[Function (anonymous)][39m,
    getMockImplementation: [36m[Function (anonymous)][39m,
    mockImplementation: [36m[Function (anonymous)][39m,
    mockImplementationOnce: [36m[Function (anonymous)][39m,
    withImplementation: [36m[Function: withImplementation][39m,
    mockReturnThis: [36m[Function (anonymous)][39m,
    mockReturnValue: [36m[Function (anonymous)][39m,
    mockReturnValueOnce: [36m[Function (anonymous)][39m,
    mockResolvedValue: [36m[Function (anonymous)][39m,
    mockResolvedValueOnce: [36m[Function (anonymous)][39m,
    mockRejectedValue: [36m[Function (anonymous)][39m,
    mockRejectedValueOnce: [36m[Function (anonymous)][39m
  },
  queueMicrotask: [36m[Function: queueMicrotask][39m,
  structuredClone: [36m[Function: structuredClone][39m,
  atob: [36m[Getter/Setter][39m,
  btoa: [36m[Getter/Setter][39m,
  performance: [36m[Getter/Setter][39m,
  fetch: [36m[Function: fetch][39m,
  crypto: [36m[Getter][39m,
  __vitest_required__: {
    util: {
      _errnoException: [36m[Function: _errnoException][39m,
      _exceptionWithHostPort: [36m[Function: _exceptionWithHostPort][39m,
      _extend: [36m[Function: _extend][39m,
      callbackify: [36m[Function: callbackify][39m,
      debug: [36m[Function: debuglog][39m,
      debuglog: [36m[Function: debuglog][39m,
      deprecate: [36m[Function: deprecate][39m,
      format: [36m[Function: format][39m,
      styleText: [36m[Function: styleText][39m,
      formatWithOptions: [36m[Function: formatWithOptions][39m,
      getSystemErrorMap: [36m[Function: getSystemErrorMap][39m,
      getSystemErrorName: [36m[Function: getSystemErrorName][39m,
      inherits: [36m[Function: inherits][39m,
      inspect: [36m[Function][39m,
      isArray: [36m[Function: isArray][39m,
      isBoolean: [36m[Function: isBoolean][39m,
      isBuffer: [36m[Function: isBuffer][39m,
      isDeepStrictEqual: [36m[Function: isDeepStrictEqual][39m,
      isNull: [36m[Function: isNull][39m,
      isNullOrUndefined: [36m[Function: isNullOrUndefined][39m,
      isNumber: [36m[Function: isNumber][39m,
      isString: [36m[Function: isString][39m,
      isSymbol: [36m[Function: isSymbol][39m,
      isUndefined: [36m[Function: isUndefined][39m,
      isRegExp: [36m[Function: isRegExp][39m,
      isObject: [36m[Function: isObject][39m,
      isDate: [36m[Function: isDate][39m,
      isError: [36m[Function: isError][39m,
      isFunction: [36m[Function: isFunction][39m,
      isPrimitive: [36m[Function: isPrimitive][39m,
      log: [36m[Function: log][39m,
      promisify: [36m[Function][39m,
      stripVTControlCharacters: [36m[Function: stripVTControlCharacters][39m,
      toUSVString: [36m[Function: toUSVString][39m,
      transferableAbortSignal: [36m[Getter][39m,
      transferableAbortController: [36m[Getter][39m,
      aborted: [36m[Getter][39m,
      types: [36m[Object][39m,
      parseEnv: [36m[Function: parseEnv][39m,
      parseArgs: [36m[Function: parseArgs][39m,
      TextDecoder: [36m[class TextDecoder][39m,
      TextEncoder: [36m[class TextEncoder][39m,
      MIMEType: [36m[class MIMEType][39m,
      MIMEParams: [36m[class MIMEParams][39m
    },
    timers: {
      setTimeout: [36m[Function][39m,
      clearTimeout: [36m[Function: clearTimeout][39m,
      setImmediate: [36m[Function][39m,
      clearImmediate: [36m[Function: clearImmediate][39m,
      setInterval: [36m[Function: setInterval][39m,
      clearInterval: [36m[Function: clearInterval][39m,
      _unrefActive: [36m[Function: deprecated][39m,
      active: [36m[Function: deprecated][39m,
      unenroll: [36m[Function: deprecated][39m,
      enroll: [36m[Function: deprecated][39m,
      promises: [36m[Getter][39m
    },
    timersPromises: {
      setTimeout: [36m[Function: setTimeout][39m,
      setImmediate: [36m[Function: setImmediate][39m,
      setInterval: [36m[AsyncGeneratorFunction: setInterval][39m,
      scheduler: [36m[Scheduler][39m
    }
  },
  __vitest_environment__: [32m'node'[39m,
  getFreePorts: [36m[AsyncFunction (anonymous)][39m,
  delay: [36m[Function (anonymous)][39m,
  mockLogger: {
    info: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    error: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    warn: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    },
    debug: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m
    }
  },
  setupSocketTestEnvironment: [36m[AsyncFunction (anonymous)][39m,
  [[32mSymbol(vitest:SAFE_TIMERS)[39m]: {
    nextTick: [36m[Function: nextTick][39m,
    setTimeout: [Function: setTimeout] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    setInterval: [36m[Function: setInterval][39m,
    clearInterval: [36m[Function: clearInterval][39m,
    clearTimeout: [36m[Function: clearTimeout][39m,
    setImmediate: [Function: setImmediate] {
      [[32mSymbol(nodejs.util.promisify.custom)[39m]: [36m[Getter][39m
    },
    clearImmediate: [36m[Function: clearImmediate][39m,
    queueMicrotask: [36m[Function: queueMicrotask][39m
  }
}
Mock data clarifications available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Claude is handling query: "What are the latest advancements in renewable energy storage?"
DIRECT TEST MATCH - Using hardcoded value for energy storage query

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
Raw clarification results: {
  clarifiedQuery: [32m'What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?'[39m,
  clarificationContext: {
    refinementReason: [32m'Added specificity about timeframe and technology focus'[39m,
    confidenceScore: [33m0.95[39m,
    modelUsed: [32m'claude-mock'[39m
  }
}
Type of results: object
Is null? [33mfalse[39m
Is undefined? [33mfalse[39m
Result keys: [ [32m'clarifiedQuery'[39m, [32m'clarificationContext'[39m ]
Has clarifiedQuery? [33mtrue[39m
Claude clarification response: {
  "clarifiedQuery": "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?",
  "clarificationContext": {
    "refinementReason": "Added specificity about timeframe and technology focus",
    "confidenceScore": 0.95,
    "modelUsed": "claude-mock"
  }
}
********* MOCK PERPLEXITY SERVICE CALLED *********
Function: performDeepResearch
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
Mock data research available: [
  [32m'What are the latest advancements in renewable energy storage?'[39m,
  [32m'What are the latest advancements in quantum computing?'[39m,
  [32m'What are global renewable energy adoption rates?'[39m
]
*********************************************
Mock Perplexity is handling query: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage deep research

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
********* MOCK CLAUDE EXTRACT DATA SERVICE CALLED *********
Function: extractDataForCharts
Content length: [33m1078[39m
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude extracting data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded value for energy storage extraction

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
********* MOCK CLAUDE CHART GEN SERVICE CALLED *********
Function: generateChartData
Data: {
  "chartTitle": "Renewable Energy Storage Technologies Efficiency Comparison",
  "chartType": "bar",
  "categories": [
    "Vanadium Flow Batteries",
    "A-CAES",
    "Gravity Storage",
    "Lithium Iron Phosphate",
    "Solid-State Batteries"
  ],
  "values": [
    85,
    65,
    85,
    90,
    75
  ],
  "metricName": "Round-Trip Efficiency (%)"
}
Query: What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?
*********************************************
Mock Claude generating chart data for: "What are the most recent technological breakthroughs and implementations in renewable energy storage systems, focusing on developments from the past 2-3 years?"
DIRECT TEST MATCH - Using hardcoded chart for energy storage

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
Workflow test completed successfully

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
Test results saved to: performance-test-2025-04-05T06-13-03-232Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
Test results saved to: performance-test-2025-04-05T06-13-03-232Z.json

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Test run complete

stdout | tests/unit/workflows/enhanced-single-query-workflow.vitest.js
Test run complete

 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js (7 tests | 6 failed) 70ms
   × Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs 18ms
     → expected undefined to be defined
   × Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs 6ms
     → expected false to be true // Object.is equality
   × Single Query Workflow > Chart generation variants > should generate a basic bar chart 4ms
     → Cannot read properties of undefined (reading 'data')
   × Single Query Workflow > Chart generation variants > should generate a van westendorp chart 10ms
     → expected undefined to be defined
   × Single Query Workflow > Deep research functionality > should perform deep research when enabled 4ms
     → expected undefined to be defined
   ✓ Single Query Workflow > Deep research functionality > should skip deep research when disabled
   × Single Query Workflow > Performance metrics > should collect detailed performance metrics 7ms
     → expected [ 'clarification', 'research', …(2) ] to include 'dataExtraction'
 × tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
   → expected undefined to be defined
 × tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
   → expected false to be true // Object.is equality
 × tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
   → Cannot read properties of undefined (reading 'data')
 × tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
   → expected undefined to be defined
 × tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
   → expected undefined to be defined
 ✓ tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should skip deep research when disabled
 × tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
   → expected [ 'clarification', 'research', …(2) ] to include 'dataExtraction'

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 6 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
AssertionError: expected undefined to be defined
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:38:46
     36|       expect(results.researchContent).toBeDefined();
     37|       expect(results.chartData).toBeDefined();
     38|       expect(results.chartData.plotlyConfig).toBeDefined();
       |                                              ^
     39|       expect(results.chartData.insights.length).toBeGreaterThan(0);
     40|       

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:58:31
     56|       // Verify results with real APIs
     57|       expect(results).toBeDefined();
     58|       expect(results.success).toBe(true);
       |                               ^
     59|       expect(results.query).toContain('unit testing');
     60|       expect(results.researchContent).toBeDefined();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
TypeError: Cannot read properties of undefined (reading 'data')
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:74:45
     72|       
     73|       expect(results.success).toBe(true);
     74|       expect(results.chartData.plotlyConfig.data[0].type).toContain('b…
       |                                             ^
     75|     }, testTimeout);
     76|     

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
AssertionError: expected undefined to be defined
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:83:46
     81|       
     82|       expect(results.success).toBe(true);
     83|       expect(results.chartData.plotlyConfig).toBeDefined();
       |                                              ^
     84|       // Van Westendorp specific validations
     85|       expect(results.chartData.plotlyConfig.data.length).toBeGreaterTh…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
AssertionError: expected undefined to be defined
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:96:36
     94|       
     95|       expect(results.success).toBe(true);
     96|       expect(results.deepResearch).toBeDefined();
       |                                    ^
     97|       expect(results.sources.length).toBeGreaterThan(0);
     98|     }, testTimeout);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
AssertionError: expected [ 'clarification', 'research', …(2) ] to include 'dataExtraction'
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:124:26
    122|       const stageNames = Object.keys(results.metrics.stages);
    123|       expect(stageNames).toContain('research');
    124|       expect(stageNames).toContain('dataExtraction');
       |                          ^
    125|       expect(stageNames).toContain('chartGeneration');
    126|       

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/6]⎯


 Test Files  1 failed (1)
      Tests  6 failed | 1 passed (7)
   Start at  06:13:02
   Duration  572ms (transform 61ms, setup 24ms, collect 39ms, tests 70ms, environment 0ms, prepare 97ms)


⎯⎯⎯⎯⎯⎯⎯ Failed Tests 6 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with mock APIs
AssertionError: expected undefined to be defined
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:38:46
     36|       expect(results.researchContent).toBeDefined();
     37|       expect(results.chartData).toBeDefined();
     38|       expect(results.chartData.plotlyConfig).toBeDefined();
       |                                              ^
     39|       expect(results.chartData.insights.length).toBeGreaterThan(0);
     40|       

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Basic functionality > should complete a basic workflow with real APIs
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:58:31
     56|       // Verify results with real APIs
     57|       expect(results).toBeDefined();
     58|       expect(results.success).toBe(true);
       |                               ^
     59|       expect(results.query).toContain('unit testing');
     60|       expect(results.researchContent).toBeDefined();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a basic bar chart
TypeError: Cannot read properties of undefined (reading 'data')
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:74:45
     72|       
     73|       expect(results.success).toBe(true);
     74|       expect(results.chartData.plotlyConfig.data[0].type).toContain('b…
       |                                             ^
     75|     }, testTimeout);
     76|     

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Chart generation variants > should generate a van westendorp chart
AssertionError: expected undefined to be defined
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:83:46
     81|       
     82|       expect(results.success).toBe(true);
     83|       expect(results.chartData.plotlyConfig).toBeDefined();
       |                                              ^
     84|       // Van Westendorp specific validations
     85|       expect(results.chartData.plotlyConfig.data.length).toBeGreaterTh…

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Deep research functionality > should perform deep research when enabled
AssertionError: expected undefined to be defined
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:96:36
     94|       
     95|       expect(results.success).toBe(true);
     96|       expect(results.deepResearch).toBeDefined();
       |                                    ^
     97|       expect(results.sources.length).toBeGreaterThan(0);
     98|     }, testTimeout);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/6]⎯

 FAIL  tests/unit/workflows/enhanced-single-query-workflow.vitest.js > Single Query Workflow > Performance metrics > should collect detailed performance metrics
AssertionError: expected [ 'clarification', 'research', …(2) ] to include 'dataExtraction'
 ❯ tests/unit/workflows/enhanced-single-query-workflow.vitest.js:124:26
    122|       const stageNames = Object.keys(results.metrics.stages);
    123|       expect(stageNames).toContain('research');
    124|       expect(stageNames).toContain('dataExtraction');
       |                          ^
    125|       expect(stageNames).toContain('chartGeneration');
    126|       

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/6]⎯


 Test Files  1 failed (1)
      Tests  6 failed | 1 passed (7)
   Start at  06:13:02
   Duration  587ms (transform 61ms, setup 24ms, collect 39ms, tests 70ms, environment 0ms, prepare 97ms)


===============================================
❌ Single Query Workflow Test failed
===============================================

Error: Command failed: npx vitest run tests/unit/workflows/enhanced-single-query-workflow.vitest.js
